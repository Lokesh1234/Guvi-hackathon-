import cv2
import mediapipe as mp
import numpy as np

# Initialize MediaPipe Pose and drawing utilities
mp_pose = mp.solutions.pose
mp_drawing = mp.solutions.drawing_utils

# ---------- FUNCTION TO CALCULATE ANGLE ----------
def calculate_angle(a, b, c):
    """
    Calculates the angle (in degrees) formed at point 'b' by points a-b-c.
    a, b, c are (x, y) coordinates.
    """
    a = np.array(a)
    b = np.array(b)
    c = np.array(c)

    radians = np.arctan2(c[1] - b[1], c[0] - b[0]) - np.arctan2(a[1] - b[1], a[0] - b[0])
    angle = np.abs(radians * 180.0 / np.pi)
    
    if angle > 180.0:
        angle = 360 - angle
    return angle

# ---------- FUNCTION TO ANALYZE FRAME ----------
def analyze_frame_for_pose(frame, pose):
    # Convert to RGB for MediaPipe
    image = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
    image.flags.writeable = False
    results = pose.process(image)

    # Convert back to BGR for OpenCV
    image.flags.writeable = True
    image = cv2.cvtColor(image, cv2.COLOR_RGB2BGR)

    if results.pose_landmarks:
        # Draw skeleton
        mp_drawing.draw_landmarks(
            image,
            results.pose_landmarks,
            mp_pose.POSE_CONNECTIONS,
            mp_drawing.DrawingSpec(color=(245,117,66), thickness=2, circle_radius=2),
            mp_drawing.DrawingSpec(color=(245,66,230), thickness=2, circle_radius=2)
        )

        # Extract keypoints for right arm
        landmarks = results.pose_landmarks.landmark
        shoulder = [landmarks[mp_pose.PoseLandmark.RIGHT_SHOULDER.value].x,
                    landmarks[mp_pose.PoseLandmark.RIGHT_SHOULDER.value].y]
        elbow = [landmarks[mp_pose.PoseLandmark.RIGHT_ELBOW.value].x,
                 landmarks[mp_pose.PoseLandmark.RIGHT_ELBOW.value].y]
        wrist = [landmarks[mp_pose.PoseLandmark.RIGHT_WRIST.value].x,
                 landmarks[mp_pose.PoseLandmark.RIGHT_WRIST.value].y]

        # Compute the elbow angle
        angle = calculate_angle(shoulder, elbow, wrist)

        # Display the angle
        cv2.putText(image, f'Elbow Angle: {int(angle)}Â°',
                    (50, 50), cv2.FONT_HERSHEY_SIMPLEX, 0.8, (0,255,0), 2, cv2.LINE_AA)

        # --- Simple Feedback Logic ---
        if angle < 40:
            feedback = "Arm too bent!"
            color = (0, 0, 255)
        elif angle > 160:
            feedback = "Arm too straight!"
            color = (0, 0, 255)
        else:
            feedback = "Good Form!"
            color = (0, 255, 0)

        cv2.putText(image, feedback, (50, 80), cv2.FONT_HERSHEY_SIMPLEX, 
                    0.9, color, 2, cv2.LINE_AA)

    return image

# ---------- MAIN VIDEO LOOP ----------
def process_video(video_source=0):
    """
    video_source: 
      0  -> webcam
      'path/to/video.mp4' -> video file
    """
    cap = cv2.VideoCapture(video_source)

    # Load MediaPipe Pose once (optimized)
    with mp_pose.Pose(min_detection_confidence=0.5, min_tracking_confidence=0.5) as pose:
        while cap.isOpened():
            ret, frame = cap.read()
            if not ret:
                break

            # Analyze the frame
            processed_frame = analyze_frame_for_pose(frame, pose)

            # Display output
            cv2.imshow('AI Sports Performance Coach', processed_frame)

            # Press 'q' to exit
            if cv2.waitKey(10) & 0xFF == ord('q'):
                break

    cap.release()
    cv2.destroyAllWindows()

# ---------- RUN ----------
# To use webcam:
# process_video(0)

# To use a video file:
# process_video('athlete_video.mp4')
